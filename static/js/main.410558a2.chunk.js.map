{"version":3,"sources":["pages/HomePage.js","components/puzzleMaker/puzzleMakerFunctions.js","components/puzzleMaker/PuzzleMaker.js","pages/MakerPage.js","components/puzzlePlayer/PuzzlePlayer.js","pages/PlayerPage.js","pages/gameDecoder.js","App.js","index.js"],"names":["HomePage","className","to","SolveBoard","pixels","width","height","this","refineStep","_initializeCells","_refineHints","_extractHints","_generateHints","_removeUnnecessaryHints","row","column","_cells","i","j","push","SolveCell","board","shouldPaint","pixelShoudBePainted","forEach","cell","initialize","roundCount","candidates","filter","canBeSolved","isSolved","length","Math","floor","random","solve","_needsHint","_attemptToRemoveHint","c","clear","result","next","find","console","log","solvedCount","solvableCount","hints","extractSolvedHint","_hint","_state","_vicinity","_initializeVicinity","_initializeHint","getCell","crossed","isCrossed","painted","isPainted","isBlank","Error","blank","cross","paint","PuzzleMaker","onChangeHints","onChangePixels","onChangeSize","onClear","isPixelPainted","getHint","rowObject","setSize","e","preventDefault","a","gameCode","generateGameCode","navigator","clipboard","writeText","window","prompt","onClick","refinedHints","generateRefinedHints","rows","Cell","key","hint","newPixels","newHints","generateHints","togglePainted","RowSeparator","makeCells","title","header","concat","apply","Object","values","map","list","reduce","nextHint","serialized","nullCount","MakerPage","useState","setPixels","setHints","size","useEffect","session","JSON","parse","sessionStorage","readStateFromSession","stringify","PuzzlePlayer","onReset","onExit","toggleCellState","pixelValues","current","newValue","indexOf","PlayerPage","game","setGame","setGameCode","initializePixels","value","onChange","target","type","match","Number","data","hintsList","reading","skips","split","char","index","undefined","decodeGameCode","err","alert","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.410558a2.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './home.scss';\n\nexport default function HomePage() {\n  return (\n    <div className=\"homeContainer\">\n      <div className=\"homeLinks\">\n        <Link to=\"/make\">Make</Link>\n        <Link to=\"/play\">Play</Link>\n      </div>\n    </div>\n  )\n}","export class SolveBoard {\n\n  constructor(pixels, width, height) {\n    this.pixels = pixels;\n    this.width = width;\n    this.height = height;\n  }\n\n  _generateHints(refineStep) {\n    this._initializeCells();\n    const refineResult = this._refineHints();\n    if (refineResult === 'success') {\n      refineStep();\n      const hints = this._extractHints();\n      return hints;\n    }\n    else {\n      return {};\n    }\n  }\n\n  generateHints() {\n    return this._generateHints(() => {});\n  }\n\n  generateRefinedHints() {\n    return this._generateHints(() => this._removeUnnecessaryHints());\n  }\n\n\n  getCell(row, column) {\n    if ((row >= 0) && (column >= 0) && (row < this.height) && (column < this.width)) {\n      return this._cells[ (row * this.width) + column ];\n    }\n    else {\n      return null;\n    }\n  }\n\n  _initializeCells() {\n    this._cells = [];\n    for(let i = 0; i < this.height; i++) {\n      for(let j = 0; j < this.width; j++) {\n        this._cells.push( new SolveCell({\n          row: i,\n          column: j,\n          board: this,\n          shouldPaint: pixelShoudBePainted(this.pixels, i, j)\n        }));\n      }\n    }\n    this._cells.forEach(cell => cell.initialize());\n  }\n\n  _refineHints() {\n\n    let roundCount = 0;\n\n    while(true) {\n      roundCount++;\n      const candidates = this._cells.filter( cell => cell.canBeSolved() );\n      const solved = this._cells.filter( cell => cell.isSolved() );\n      if (solved.length === this._cells.length) {\n        return 'success';\n      }\n      else if (candidates.length === 0) {\n        return 'impossible';\n      }\n      else if (roundCount > 10000) {\n        return 'impossible';\n      }\n      else {\n        const randomIndex = Math.floor(Math.random() * candidates.length);\n        const randomCandidate = candidates[randomIndex];\n        randomCandidate.solve();\n      }\n    }\n  }\n\n  _removeUnnecessaryHints() {\n    this._cells\n      .filter(cell => cell._needsHint)\n      .forEach(cell => this._attemptToRemoveHint(cell));\n  }\n\n  _attemptToRemoveHint(cell) {\n    cell._needsHint = false;\n    this._cells.forEach(c => c.clear());\n    let result = null;\n    while(!result) {\n      const next = this._cells.find(cell => cell._needsHint && cell.canBeSolved());\n      console.log('checking', next);\n      if (next) {\n        next.solve();\n      }\n      const solvedCount = this._cells.filter(cell => cell.isSolved()).length;\n      const solvableCount = this._cells.filter(cell => cell._needsHint && cell.canBeSolved()).length;\n      console.log('solved: ' + solvedCount + '; canBeSolved: ' + solvableCount + '; total: ' + this._cells.length);\n      if (solvedCount === this._cells.length) {\n        result = 'success';\n      }\n      else if (solvableCount === 0) {\n        result = 'impossible';\n      }\n    }\n    if (result === 'impossible') {\n      cell._needsHint = true;\n    }\n  }\n\n  _extractHints() {\n    const hints = {};\n    this._cells.forEach(cell => {\n      if(!hints[cell.row]) {\n        hints[cell.row] = {};\n      }\n      hints[cell.row][cell.column] = cell.extractSolvedHint()\n    });\n    return hints;\n  }\n\n}\n\nfunction pixelShoudBePainted(pixels, row, column) {\n  const rowObject = pixels[row] || {};\n  return rowObject[column] || false;\n}\n\nclass SolveCell {\n\n  constructor({row, column, board, shouldPaint}) {\n    this.row = row;\n    this.column = column;\n    this.board = board;\n    this.shouldPaint = shouldPaint;\n\n    this._hint = null;\n    this._needsHint = false;\n    this._state = 'blank'; // 'blank' | 'crossed' | 'painted'\n    this._vicinity = [];\n  }\n\n  initialize() {\n    this._initializeVicinity();\n    this._initializeHint();\n  }\n\n  _initializeVicinity() {\n    for(let i = this.row - 1; i <= this.row + 1; i++) {\n      for(let j = this.column - 1; j <= this.column + 1; j++) {\n        const cell = this.board.getCell(i, j);\n        if (cell) {\n          this._vicinity.push(cell);\n        }\n      }\n    }\n  }\n\n  _initializeHint() {\n    this._hint = this._vicinity\n                   .filter(cell => cell.shouldPaint)\n                   .length;\n  }\n\n  canBeSolved() {\n    if (this.isSolved()) {\n      return false;\n    }\n    const crossed = this._vicinity.filter(cell => cell.isCrossed());\n    const painted = this._vicinity.filter(cell => cell.isPainted());\n    \n    return (this._vicinity.length - crossed.length === this._hint) ||\n           (painted.length === this._hint);\n  }\n\n  isSolved() {\n    return this._vicinity.filter(cell => cell.isBlank()).length === 0;\n  }\n\n  solve() {\n    if (!this.canBeSolved()) {\n      console.log('cannot solve cell', this);\n      throw new Error('Attempted to solve an impossible cell', this);\n    }\n    this._needsHint = true;\n    const painted = this._vicinity.filter(cell => cell.isPainted());\n    const blank = this._vicinity.filter(cell => cell.isBlank());\n    if (this._hint === painted.length) {\n      blank.forEach(cell => cell.cross());\n    }\n    else {\n      blank.forEach(cell => cell.paint());\n    }\n\n  }\n\n  paint() {\n    this._state = 'painted';\n  }\n\n  cross() {\n    this._state = 'crossed';\n  }\n\n  clear() {\n    this._state = 'blank';\n  }\n\n  isPainted() {\n    return this._state === 'painted';\n  }\n\n  isCrossed() {\n    return this._state === 'crossed';\n  }\n\n  isBlank() {\n    return this._state === 'blank';\n  }\n\n  extractSolvedHint() {\n    if (this._needsHint) {\n      return this._hint;\n    }\n    else {\n      return null;\n    }\n  }\n\n}","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './puzzleMaker.scss';\n\nimport {SolveBoard} from './puzzleMakerFunctions';\n\nexport default function PuzzleMaker({\n  width, height, hints, pixels, onChangeHints, onChangePixels, onChangeSize, onClear\n}) {\n\n  function makeCells() {\n    let rows = [];\n    for(let i = 0; i < height; i++) {\n      let row = [];\n      for(let j = 0; j < width; j++) {\n        let cell = (\n          <Cell key={`c${j}x${i}`} \n                painted={isPixelPainted(pixels, i, j)}\n                hint={getHint(i, j)}\n                onClick={() => togglePainted(i, j)} ></Cell>\n        )\n        row.push(cell);\n      }\n      rows.push(row);\n      rows.push(<RowSeparator key={`separator-${i}`} />)\n    }\n    return rows;\n  }\n\n  function isPixelPainted(pixels, row, column) {\n    const rowObject = pixels[row] ? pixels[row] : {};\n    return !!rowObject[column];\n  }\n\n  function togglePainted(row, column) {\n    const rowObject = pixels[row] ? pixels[row] : {};\n    const newPixels = {\n      ...pixels, \n      [row]: {\n        ...rowObject, [column]: !isPixelPainted(pixels, row, column)\n      }\n    };\n    const solver = new SolveBoard(newPixels, width, height);\n    const newHints = solver.generateHints();\n    onChangePixels(newPixels);\n    onChangeHints(newHints);\n  }\n\n  function getHint(row, column) {\n    const rowObject = hints[row] ? hints[row] : {};\n    return typeof rowObject[column] === 'number' ? rowObject[column] : '';\n  }\n\n  function generateNumbers() {\n    const solver = new SolveBoard(pixels, width, height);\n    const refinedHints = solver.generateRefinedHints();\n    onChangeHints( refinedHints );\n  }\n\n  const setSize = (width, height) => (e) => {\n    e.preventDefault();\n    onChangeSize({width, height});\n  }\n\n  async function copyGameCode() {\n    const gameCode = generateGameCode(hints, width, height);\n    try {\n      await navigator.clipboard.writeText(gameCode);\n    }\n    catch(err) {\n      window.prompt('Copy the game code below', gameCode);\n    }\n  }\n\n  return (\n\n    <div className=\"puzzleMaker\">\n      <div className=\"puzzleMaker-floatingAction\">\n        <Link to=\"/\">Back</Link>\n      </div>\n      <div className=\"puzzleMaker-controls\">\n        <div className=\"puzzleMaker-sizes\">\n          <label>Change puzzle size</label>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(5, 5)}>5x5</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(10, 10)}>10x10</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(10, 15)}>10x15</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(15, 10)}>15x10</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(15, 15)}>15x15</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(15, 20)}>15x20</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(20, 15)}>20x15</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(20, 20)}>20x20</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(20, 25)}>20x25</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(25, 20)}>25x20</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(25, 25)}>25x25</button>\n        </div>\n        <button className=\"puzzleMaker-reset\" onClick={onClear}>Reset</button>\n        <button className=\"puzzleMaker-optimize\" onClick={generateNumbers}>\n          Optimize Hints\n        </button>\n      </div>\n      <div className=\"puzzleMaker-maker\">\n        <div className=\"puzzleMaker-board\">\n          {makeCells()}\n        </div>\n        <div className=\"puzzleMaker-gameCode\" onClick={copyGameCode} title=\"click to copy\">\n          <p>\n            {generateGameCode(hints, width, height)}\n          </p>\n        </div>\n      </div>\n      \n    </div>\n\n  );\n\n}\n\nfunction RowSeparator() {\n  return <div className=\"puzzleMaker-rowSeparator\"></div>\n}\n\nfunction Cell({painted, hint, onClick}) {\n  return (\n    <div onClick={onClick} className={`puzzleMaker-cell ${painted ? '--painted' : ''}`}>\n      {hint}\n    </div>\n  );\n}\n\nfunction generateGameCode(hints, width, height) {\n  const header = `${width}x${height}:`;\n  const flattened = [].concat.apply([], Object.values(hints).map(list => Object.values(list)));\n  const [serialized, ] = flattened.reduce(function([serialized, nullCount], nextHint) {\n    if (nextHint === null) {\n      return [serialized, nullCount + 1]\n    }\n    else if (nullCount > 0){\n      return [`${serialized}(${nullCount})${nextHint}`, 0];\n    }\n    else {\n      return [`${serialized}${nextHint}`, 0];\n    }\n  }, ['', 0]);\n  return header + serialized;\n}","import React, {useState, useEffect} from 'react';\nimport PuzzleMaker from '../components/puzzleMaker/PuzzleMaker';\n\nexport default function MakerPage() {\n\n  const [pixels, setPixels] = useState({});\n  const [hints, setHints] = useState({});\n  const [size, setSize] = useState({width: 5, height: 5});\n\n  useEffect(() => {\n    const session = readStateFromSession();\n    setPixels(session.pixels);\n    setHints(session.hints);\n    setSize(session.size)\n  }, []);\n\n  useEffect(() => {\n    window.sessionStorage['puzzleMaker'] = JSON.stringify({pixels, hints, size})\n  }, [hints, pixels, size]);\n\n  function clear() {\n    setPixels({});\n    setHints({});\n  }\n\n\n  return (\n    <PuzzleMaker \n        width={size.width} \n        height={size.height}\n        hints={hints}\n        pixels={pixels}\n        onChangeHints={setHints}\n        onChangePixels={setPixels}\n        onChangeSize={setSize} \n        onClear={() => clear()}\n        />\n  )\n}\n\n\nfunction readStateFromSession() {\n  try{\n    return JSON.parse(window.sessionStorage['puzzleMaker']);\n  }\n  catch(e) {\n    return {hints: {}, pixels: {}, size: {width: 5, height: 5}}\n  }\n}","import React from 'react';\nimport './puzzlePlayer.scss';\n\nexport default function PuzzlePlayer({hints, pixels, onChangePixels, onReset, onExit, width, height}) {\n\n  const toggleCellState = (row, column) => e => {\n    e.preventDefault();\n    const pixelValues = ['blank', 'painted', 'crossed'];\n    const current = pixels[row][column];\n    const newValue = pixelValues[ (pixelValues.indexOf(current) + 1) % pixelValues.length ];\n    onChangePixels({\n      ...pixels,\n      [row]: {\n        ...pixels[row],\n        [column]: newValue\n      }\n    });\n  }\n\n  function makeCells() {\n    let rows = [];\n    for(let i = 0; i < height; i++) {\n      let row = [];\n      for(let j = 0; j < width; j++) {\n        let cell = (\n          <div  className={`puzzlePlayer-cell --${pixels[i][j]}`}\n                onClick={toggleCellState(i, j)}\n                key={`c${j}x${i}`}>\n            {hints[i][j]}\n          </div>\n        )\n        row.push(cell);\n      }\n      rows.push(row);\n      rows.push(<div className=\"puzzlePlayer-separator\" key={`separator-${i}`} />)\n    }\n    return rows;\n  }\n\n  function useSmall() {\n    return width >= 20 || height >= 20;\n  }\n\n  return (\n    <div className=\"puzzlePlayer\">\n      <div className=\"puzzlePlayer-controls\">\n        <button className=\"puzzlePlayer-resetButton\" onClick={onReset}>Reset</button>\n        <button className=\"puzzlePlayer-backButton\" onClick={onExit}>Back</button>\n      </div>\n      <div className={`puzzlePlayer-player ${useSmall() ? '--small' : ''}`}>\n        <div className=\"puzzlePlayer-board\">\n          {makeCells()}\n        </div>\n      </div>\n    </div>\n  )\n}","import React, {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport PuzzlePlayer from '../components/puzzlePlayer/PuzzlePlayer';\nimport {decodeGameCode} from './gameDecoder';\n\nconst mockCode = '10x10:(1)0(2)0(1)0(2)0(1)0(2)2(3)0(1)0(2)45(2)42(6)9(10)6(4)0(1)2(5)0(4)4(6)12(2)23(2)10(2)1(2)11(3)0(2)0(2)0(1)0';\n\nexport default function PlayerPage() {\n\n  const [game, setGame] = useState(null);\n  const [gameCode, setGameCode] = useState(mockCode);\n\n  useEffect(() => {\n    const session = readStateFromSession();\n    setGame(session.game);\n  }, []);\n\n  useEffect(() => {\n    window.sessionStorage['puzzlePlayer'] = JSON.stringify({game});\n  }, [game])\n\n\n  function startGame() {\n    try {\n      const {width, height, hints} = decodeGameCode(gameCode);\n      setGame({width, height, hints, pixels: initializePixels(width, height)});\n    }\n    catch(err) {\n      alert('invalid game code');\n    }\n  }\n\n  if (game) {\n    return (\n      <PuzzlePlayer \n          {...game} \n          onChangePixels={(pixels) => setGame({...game, pixels})}\n          onReset={() => setGame({...game, pixels: initializePixels(game.width, game.height)})}\n          onExit={() => setGame(null)}\n          />\n    )\n  }\n  else {\n    return (\n      <div>\n        <nav className=\"enterGame-navigation\">\n          <Link to=\"/\">Back</Link>\n        </nav>\n        <div className=\"enterGameContainer\">\n          <p className=\"enterGame-text\">Enter game code</p>\n          <input className=\"enterGame-input\" \n                value={gameCode} onChange={e => setGameCode(e.target.value)} \n                type=\"text\"></input>\n          <button className=\"enterGame-button\" onClick={startGame}>Start</button>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nfunction readStateFromSession() {\n  try{\n    return JSON.parse(window.sessionStorage['puzzlePlayer']);\n  }\n  catch(e) {\n    console.log(e);\n    return {game: null}\n  }\n}\n\nfunction initializePixels(width, height) {\n  const pixels = [];\n  for(let i = 0; i < height; i++) {\n    pixels.push([]);\n    for(let j = 0; j < width; j++) {\n      pixels[i].push('blank');\n    }\n  }\n  return pixels;\n}","export function decodeGameCode(gameCode) {\n  const match = gameCode.match(/(\\d+)x(\\d+):(.*)/);\n  const width = Number(match[1]);\n  const height = Number(match[2]);\n  const data = match[3];\n  \n  const hintsList = [];\n  let reading = 'hint' \n  let skips = '';\n  data.split('').forEach(char => {\n    if (char === '(') {\n      reading = 'skips';\n    }\n    else if (char === ')') {\n      for(let i = 0; i < Number(skips); i++) {\n        hintsList.push('');\n      }\n      reading = 'hint'\n      skips = '';\n    }\n    else if (reading === 'hint'){\n      hintsList.push(char)\n    }\n    else if (reading === 'skips') {\n      skips = skips + char;\n    }\n  });\n\n  const hints = [];\n  for(let i = 0; i < height; i++) {\n    hints.push([]);\n    for(let j = 0; j < width; j++) {\n      const index = i * width + j;\n      const value = hintsList[index] === undefined ? '' : hintsList[index];\n      hints[i].push(value);\n    }\n  }\n\n  return {width, height, hints};\n}","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css'\n\nimport HomePage from './pages/HomePage';\nimport MakerPage from './pages/MakerPage';\nimport PlayerPage from './pages/PlayerPage';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/make\">\n          <MakerPage />\n        </Route>\n        <Route path=\"/play\">\n          <PlayerPage />\n        </Route>\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}