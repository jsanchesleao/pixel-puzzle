{"version":3,"sources":["pages/HomePage.js","components/puzzleMaker/puzzleMakerFunctions.js","components/puzzleMaker/PuzzleMaker.js","pages/MakerPage.js","components/puzzlePlayer/PuzzlePlayer.js","pages/PlayerPage.js","pages/gameDecoder.js","App.js","index.js"],"names":["HomePage","className","to","SolveBoard","pixels","width","height","this","_initializeCells","_refineHints","_extractHints","row","column","_cells","i","j","push","SolveCell","board","shouldPaint","pixelShoudBePainted","forEach","cell","initialize","roundCount","candidates","filter","canBeSolved","isSolved","length","Math","floor","random","solve","hints","extractSolvedHint","_hint","_needsHint","_state","_vicinity","_initializeVicinity","_initializeHint","getCell","crossed","isCrossed","painted","isPainted","isBlank","Error","blank","cross","paint","PuzzleMaker","onChangeHints","onChangePixels","onChangeSize","onClear","isPixelPainted","getHint","rowObject","countHints","Object","values","map","hint","reduce","a","b","setSize","e","preventDefault","gameCode","generateGameCode","navigator","clipboard","writeText","window","prompt","onClick","solver","finalHints","generateHints","min","newHints","alert","console","log","rows","Cell","key","newPixels","togglePainted","RowSeparator","makeCells","title","header","concat","apply","list","nextHint","serialized","nullCount","MakerPage","useState","setPixels","setHints","size","useEffect","session","JSON","parse","sessionStorage","readStateFromSession","stringify","PuzzlePlayer","onReset","onExit","toggleCellState","pixelValues","current","newValue","indexOf","PlayerPage","game","setGame","setGameCode","initializePixels","value","onChange","target","type","match","Number","data","hintsList","reading","skips","split","char","index","undefined","decodeGameCode","err","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bf99c1a.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './home.scss';\n\nexport default function HomePage() {\n  return (\n    <div className=\"homeContainer\">\n      <div className=\"homeLinks\">\n        <Link to=\"/make\">Make</Link>\n        <Link to=\"/play\">Play</Link>\n      </div>\n    </div>\n  )\n}","export class SolveBoard {\n\n  constructor(pixels, width, height) {\n    this.pixels = pixels;\n    this.width = width;\n    this.height = height;\n  }\n\n  generateHints() {\n    this._initializeCells();\n    const refineResult = this._refineHints();\n    if (refineResult === 'success') {\n      const hints = this._extractHints();\n      return hints;\n    }\n    else {\n      return {};\n    }\n  }\n\n\n  getCell(row, column) {\n    if ((row >= 0) && (column >= 0) && (row < this.height) && (column < this.width)) {\n      return this._cells[ (row * this.width) + column ];\n    }\n    else {\n      return null;\n    }\n  }\n\n  _initializeCells() {\n    this._cells = [];\n    for(let i = 0; i < this.height; i++) {\n      for(let j = 0; j < this.width; j++) {\n        this._cells.push( new SolveCell({\n          row: i,\n          column: j,\n          board: this,\n          shouldPaint: pixelShoudBePainted(this.pixels, i, j)\n        }));\n      }\n    }\n    this._cells.forEach(cell => cell.initialize());\n  }\n\n  _refineHints() {\n\n    let roundCount = 0;\n\n    while(true) {\n      roundCount++;\n      const candidates = this._cells.filter( cell => cell.canBeSolved());\n      const solved = this._cells.filter( cell => cell.isSolved() );\n      if (solved.length === this._cells.length) {\n        return 'success';\n      }\n      else if (candidates.length === 0) {\n        return 'impossible';\n      }\n      else if (roundCount > 10000) {\n        return 'impossible';\n      }\n      else {\n        const randomIndex = Math.floor(Math.random() * candidates.length);\n        const randomCandidate = candidates[randomIndex];\n        randomCandidate.solve();\n      }\n    }\n  }\n\n  _extractHints() {\n    const hints = {};\n    this._cells.forEach(cell => {\n      if(!hints[cell.row]) {\n        hints[cell.row] = {};\n      }\n      hints[cell.row][cell.column] = cell.extractSolvedHint()\n    });\n    return hints;\n  }\n\n}\n\nfunction pixelShoudBePainted(pixels, row, column) {\n  const rowObject = pixels[row] || {};\n  return rowObject[column] || false;\n}\n\nclass SolveCell {\n\n  constructor({row, column, board, shouldPaint}) {\n    this.row = row;\n    this.column = column;\n    this.board = board;\n    this.shouldPaint = shouldPaint;\n\n    this._hint = null;\n    this._needsHint = false;\n    this._state = 'blank'; // 'blank' | 'crossed' | 'painted'\n    this._vicinity = [];\n  }\n\n  initialize() {\n    this._initializeVicinity();\n    this._initializeHint();\n  }\n\n  _initializeVicinity() {\n    for(let i = this.row - 1; i <= this.row + 1; i++) {\n      for(let j = this.column - 1; j <= this.column + 1; j++) {\n        const cell = this.board.getCell(i, j);\n        if (cell) {\n          this._vicinity.push(cell);\n        }\n      }\n    }\n  }\n\n  _initializeHint() {\n    this._hint = this._vicinity\n                   .filter(cell => cell.shouldPaint)\n                   .length;\n  }\n\n  canBeSolved() {\n    if (this.isSolved()) {\n      return false;\n    }\n    const crossed = this._vicinity.filter(cell => cell.isCrossed());\n    const painted = this._vicinity.filter(cell => cell.isPainted());\n    \n    return (this._vicinity.length - crossed.length === this._hint) ||\n           (painted.length === this._hint);\n  }\n\n  isSolved() {\n    return this._vicinity.filter(cell => cell.isBlank()).length === 0;\n  }\n\n  solve() {\n    if (!this.canBeSolved()) {\n      throw new Error('Attempted to solve an impossible cell', this);\n    }\n    this._needsHint = true;\n    const painted = this._vicinity.filter(cell => cell.isPainted());\n    const blank = this._vicinity.filter(cell => cell.isBlank());\n    if (this._hint === painted.length) {\n      blank.forEach(cell => cell.cross());\n    }\n    else {\n      blank.forEach(cell => cell.paint());\n    }\n\n  }\n\n  paint() {\n    this._state = 'painted';\n  }\n\n  cross() {\n    this._state = 'crossed';\n  }\n\n  isPainted() {\n    return this._state === 'painted';\n  }\n\n  isCrossed() {\n    return this._state === 'crossed';\n  }\n\n  isBlank() {\n    return this._state === 'blank';\n  }\n\n  extractSolvedHint() {\n    if (this._needsHint) {\n      return this._hint;\n    }\n    else {\n      return null;\n    }\n  }\n\n}","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './puzzleMaker.scss';\n\nimport {SolveBoard} from './puzzleMakerFunctions';\n\nexport default function PuzzleMaker({\n  width, height, hints, pixels, onChangeHints, onChangePixels, onChangeSize, onClear\n}) {\n\n  function makeCells() {\n    let rows = [];\n    for(let i = 0; i < height; i++) {\n      let row = [];\n      for(let j = 0; j < width; j++) {\n        let cell = (\n          <Cell key={`c${j}x${i}`} \n                painted={isPixelPainted(pixels, i, j)}\n                hint={getHint(i, j)}\n                onClick={() => togglePainted(i, j)} ></Cell>\n        )\n        row.push(cell);\n      }\n      rows.push(row);\n      rows.push(<RowSeparator key={`separator-${i}`} />)\n    }\n    return rows;\n  }\n\n  function isPixelPainted(pixels, row, column) {\n    const rowObject = pixels[row] ? pixels[row] : {};\n    return !!rowObject[column];\n  }\n\n  function togglePainted(row, column) {\n    const rowObject = pixels[row] ? pixels[row] : {};\n    const newPixels = {\n      ...pixels, \n      [row]: {\n        ...rowObject, [column]: !isPixelPainted(pixels, row, column)\n      }\n    };\n    const solver = new SolveBoard(newPixels, width, height);\n    const newHints = solver.generateHints();\n    onChangePixels(newPixels);\n    onChangeHints(newHints);\n  }\n\n  function getHint(row, column) {\n    const rowObject = hints[row] ? hints[row] : {};\n    return typeof rowObject[column] === 'number' ? rowObject[column] : '';\n  }\n\n  function generateNumbers() {\n    const solver = new SolveBoard(pixels, width, height);\n    let finalHints = countHints(hints) > 0 ? hints : solver.generateHints();\n    for(let i = 0; i < Math.min(width * height * 10, 1000); i++) {\n      const newHints = solver.generateHints();\n      if (countHints(newHints) === 0) {\n        alert('impossible figure for our current algorithm');\n        return;\n      }\n      if (!finalHints || (countHints(newHints) < countHints(finalHints))) {\n        finalHints = newHints;\n      }\n      console.log('Optimization Round: ' + i + ' \\t\\t size is: ' + countHints(finalHints));\n    }\n    onChangeHints( finalHints );\n  }\n\n  function countHints(hints) {\n    return Object.values(hints)\n      .map(Object.values)\n      .map(row => row.filter(hint => hint !== null))\n      .map(row => row.length)\n      .reduce((a, b) => a + b, 0)\n  }\n\n  const setSize = (width, height) => (e) => {\n    e.preventDefault();\n    onChangeSize({width, height});\n  }\n\n  async function copyGameCode() {\n    const gameCode = generateGameCode(hints, width, height);\n    try {\n      await navigator.clipboard.writeText(gameCode);\n    }\n    catch(err) {\n      window.prompt('Copy the game code below', gameCode);\n    }\n  }\n\n  return (\n\n    <div className=\"puzzleMaker\">\n      <div className=\"puzzleMaker-floatingAction\">\n        <Link to=\"/\">Back</Link>\n      </div>\n      <div className=\"puzzleMaker-controls\">\n        <div className=\"puzzleMaker-sizes\">\n          <label>Change puzzle size</label>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(5, 5)}>5x5</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(10, 10)}>10x10</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(15, 10)}>15x10</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(15, 15)}>15x15</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(20, 15)}>20x15</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(20, 20)}>20x20</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(25, 20)}>25x20</button>\n          <button className=\"puzzleMaker-sizeButton\" onClick={setSize(25, 25)}>25x25</button>\n        </div>\n        <button className=\"puzzleMaker-reset\" onClick={onClear}>Reset</button>\n        <button className=\"puzzleMaker-optimize\" onClick={generateNumbers}>\n          Optimize Hints\n        </button>\n      </div>\n      <div className=\"puzzleMaker-maker\">\n        <div className=\"puzzleMaker-board\">\n          {makeCells()}\n        </div>\n        <div className=\"puzzleMaker-gameCode\" onClick={copyGameCode} title=\"click to copy\">\n          <p>\n            {generateGameCode(hints, width, height)}\n          </p>\n        </div>\n      </div>\n      \n    </div>\n\n  );\n\n}\n\nfunction RowSeparator() {\n  return <div className=\"puzzleMaker-rowSeparator\"></div>\n}\n\nfunction Cell({painted, hint, onClick}) {\n  return (\n    <div onClick={onClick} className={`puzzleMaker-cell ${painted ? '--painted' : ''}`}>\n      {hint}\n    </div>\n  );\n}\n\nfunction generateGameCode(hints, width, height) {\n  const header = `${width}x${height}:`;\n  const flattened = [].concat.apply([], Object.values(hints).map(list => Object.values(list)));\n  const [serialized, ] = flattened.reduce(function([serialized, nullCount], nextHint) {\n    if (nextHint === null) {\n      return [serialized, nullCount + 1]\n    }\n    else if (nullCount > 0){\n      return [`${serialized}(${nullCount})${nextHint}`, 0];\n    }\n    else {\n      return [`${serialized}${nextHint}`, 0];\n    }\n  }, ['', 0]);\n  return header + serialized;\n}","import React, {useState, useEffect} from 'react';\nimport PuzzleMaker from '../components/puzzleMaker/PuzzleMaker';\n\nexport default function MakerPage() {\n\n  const [pixels, setPixels] = useState({});\n  const [hints, setHints] = useState({});\n  const [size, setSize] = useState({width: 5, height: 5});\n\n  useEffect(() => {\n    const session = readStateFromSession();\n    setPixels(session.pixels);\n    setHints(session.hints);\n    setSize(session.size)\n  }, []);\n\n  useEffect(() => {\n    window.sessionStorage['puzzleMaker'] = JSON.stringify({pixels, hints, size})\n  }, [hints, pixels, size]);\n\n  function clear() {\n    setPixels({});\n    setHints({});\n  }\n\n\n  return (\n    <PuzzleMaker \n        width={size.width} \n        height={size.height}\n        hints={hints}\n        pixels={pixels}\n        onChangeHints={setHints}\n        onChangePixels={setPixels}\n        onChangeSize={setSize} \n        onClear={() => clear()}\n        />\n  )\n}\n\n\nfunction readStateFromSession() {\n  try{\n    return JSON.parse(window.sessionStorage['puzzleMaker']);\n  }\n  catch(e) {\n    return {hints: {}, pixels: {}, size: {width: 5, height: 5}}\n  }\n}","import React from 'react';\nimport './puzzlePlayer.scss';\n\nexport default function PuzzlePlayer({hints, pixels, onChangePixels, onReset, onExit, width, height}) {\n\n  const toggleCellState = (row, column) => e => {\n    e.preventDefault();\n    const pixelValues = ['blank', 'painted', 'crossed'];\n    const current = pixels[row][column];\n    const newValue = pixelValues[ (pixelValues.indexOf(current) + 1) % pixelValues.length ];\n    onChangePixels({\n      ...pixels,\n      [row]: {\n        ...pixels[row],\n        [column]: newValue\n      }\n    });\n  }\n\n  function makeCells() {\n    let rows = [];\n    for(let i = 0; i < height; i++) {\n      let row = [];\n      for(let j = 0; j < width; j++) {\n        let cell = (\n          <div  className={`puzzlePlayer-cell --${pixels[i][j]}`}\n                onClick={toggleCellState(i, j)}\n                key={`c${j}x${i}`}>\n            {hints[i][j]}\n          </div>\n        )\n        row.push(cell);\n      }\n      rows.push(row);\n      rows.push(<div className=\"puzzlePlayer-separator\" key={`separator-${i}`} />)\n    }\n    return rows;\n  }\n\n  function useSmall() {\n    return width >= 20 || height >= 20;\n  }\n\n  return (\n    <div className=\"puzzlePlayer\">\n      <div className=\"puzzlePlayer-controls\">\n        <button className=\"puzzlePlayer-resetButton\" onClick={onReset}>Reset</button>\n        <button className=\"puzzlePlayer-backButton\" onClick={onExit}>Back</button>\n      </div>\n      <div className={`puzzlePlayer-player ${useSmall() ? '--small' : ''}`}>\n        <div className=\"puzzlePlayer-board\">\n          {makeCells()}\n        </div>\n      </div>\n    </div>\n  )\n}","import React, {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport PuzzlePlayer from '../components/puzzlePlayer/PuzzlePlayer';\nimport {decodeGameCode} from './gameDecoder';\n\nconst mockCode = '10x10:(1)0(2)0(1)0(2)0(1)0(2)2(3)0(1)0(2)45(2)42(6)9(10)6(4)0(1)2(5)0(4)4(6)12(2)23(2)10(2)1(2)11(3)0(2)0(2)0(1)0';\n\nexport default function PlayerPage() {\n\n  const [game, setGame] = useState(null);\n  const [gameCode, setGameCode] = useState(mockCode);\n\n  useEffect(() => {\n    const session = readStateFromSession();\n    setGame(session.game);\n  }, []);\n\n  useEffect(() => {\n    window.sessionStorage['puzzlePlayer'] = JSON.stringify({game});\n  }, [game])\n\n\n  function startGame() {\n    try {\n      const {width, height, hints} = decodeGameCode(gameCode);\n      setGame({width, height, hints, pixels: initializePixels(width, height)});\n    }\n    catch(err) {\n      alert('invalid game code');\n    }\n  }\n\n  if (game) {\n    return (\n      <PuzzlePlayer \n          {...game} \n          onChangePixels={(pixels) => setGame({...game, pixels})}\n          onReset={() => setGame({...game, pixels: initializePixels(game.width, game.height)})}\n          onExit={() => setGame(null)}\n          />\n    )\n  }\n  else {\n    return (\n      <div>\n        <nav className=\"enterGame-navigation\">\n          <Link to=\"/\">Back</Link>\n        </nav>\n        <div className=\"enterGameContainer\">\n          <p className=\"enterGame-text\">Enter game code</p>\n          <input className=\"enterGame-input\" \n                value={gameCode} onChange={e => setGameCode(e.target.value)} \n                type=\"text\"></input>\n          <button className=\"enterGame-button\" onClick={startGame}>Start</button>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nfunction readStateFromSession() {\n  try{\n    return JSON.parse(window.sessionStorage['puzzlePlayer']);\n  }\n  catch(e) {\n    console.log(e);\n    return {game: null}\n  }\n}\n\nfunction initializePixels(width, height) {\n  const pixels = [];\n  for(let i = 0; i < height; i++) {\n    pixels.push([]);\n    for(let j = 0; j < width; j++) {\n      pixels[i].push('blank');\n    }\n  }\n  return pixels;\n}","export function decodeGameCode(gameCode) {\n  const match = gameCode.match(/(\\d+)x(\\d+):(.*)/);\n  const width = Number(match[1]);\n  const height = Number(match[2]);\n  const data = match[3];\n  \n  const hintsList = [];\n  let reading = 'hint' \n  let skips = '';\n  data.split('').forEach(char => {\n    if (char === '(') {\n      reading = 'skips';\n    }\n    else if (char === ')') {\n      for(let i = 0; i < Number(skips); i++) {\n        hintsList.push('');\n      }\n      reading = 'hint'\n      skips = '';\n    }\n    else if (reading === 'hint'){\n      hintsList.push(char)\n    }\n    else if (reading === 'skips') {\n      skips = skips + char;\n    }\n  });\n\n  const hints = [];\n  for(let i = 0; i < height; i++) {\n    hints.push([]);\n    for(let j = 0; j < width; j++) {\n      const index = i * height + j;\n      const value = hintsList[index] === undefined ? '' : hintsList[index];\n      hints[i].push(value);\n    }\n  }\n\n  return {width, height, hints};\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css'\n\nimport HomePage from './pages/HomePage';\nimport MakerPage from './pages/MakerPage';\nimport PlayerPage from './pages/PlayerPage';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/make\">\n          <MakerPage />\n        </Route>\n        <Route path=\"/play\">\n          <PlayerPage />\n        </Route>\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}